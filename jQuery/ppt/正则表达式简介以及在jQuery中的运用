<style>
pre{
	width:100% !important;
	line-height:2 !important;
	font-size:38px !important;
}
</style>
### 正则表达式简介以及在jQuery中的运用

---

### JQuery中的正则表达式
    /-([\da-z])/gi
    /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/
    /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi

---

### 正则表达式的重要概念
*   正则表达式引擎（[NFA|DFA](http://blog.huanghao.me/?p=55)）
*   普通字符、特殊字符（元字符）以及修饰符
*   字符组
*   “环视”（lookaround）"向前查看"“向后查看” - 零长度断言 
	
	js只有lookahead x(?=y) x(!=y)
*   分组、捕获和量词

---

### 正则表达式中的难点
* 元字符在不同环境下的不同含义

    	\ ^ $ * + ? . ( ) | { } [ ] \w（[^A-Za-z0-9_]）
* 在字符组[]中的元字符
    * ^只在最开始的时候才是元字符，否则只是普通字符
    * \- 除在头部和尾部（[-xxxx][xxx-]）不是元字符，其他位置都是元字符
    * 上面的元字符除\在字符组中都只是普通字符

    		举例：/([.*+?^=!:${}()|[\]\/\\])/g


----

* 在字符组[]中的元字符 - 继续
	* \b 在字符组中代表着回车符
	* 除空字符组之外，字符组不是“零宽”
    
    	举例说明：/a[^q]/ 匹配字符串 
            apple
            iraq
            pian
            nica
	* 在javascript的/xxx/表达式中 /为特殊字符,所以需要转义,在new reg当中 \本身需要转移,因为在str中，\本身就是一个转移字符

	
----


* 贪婪匹配与非贪婪匹配
		
			* 等价于 {0，}
			+ 等价于 {1，}
			? 等价于 {0,1}

---

### 影响正则表达式的性能
1.	减少回溯
2.	提高匹配的准确性
3.	非贪婪模式
4.	有必要的话，对于非捕获括号使用(?:)

---


### 如何制作一个正则表达式
设计一个能够匹配url的一个正则表达式

-	考虑匹配的场景和确定url的形式
	
	url的基本型：http://www.alipay.com/home/index.html?a=b&c=d#dfjedfs
	
-	根据一个现有的假设的url尝试写出基本型,按照从左到右的方面逐步尝试

		http:\/\/[\w-]+(?:\.[\w-]+)+(?:\/[\w-.]+)?(?:\?([\w\s(?:=[\w]+)?(&\1)+])?(#[\S]*)?)?

----

-	扩展基本型，同时考虑各种场景和可能性
	
	* https?ftp?file? 端口号？ ip地址是否支持 ipv6地址？
	* 域名有限制否？
	* 路径长度
	* 参数类型，是否支持转义后的字符？
	* hash数值
	
-	评估正则表达式的合理性以及性能

---

### 如果理解其他人的正则表达式
1.	尝试根据代码的上下文去理解
2.	从左到右依次拆解，去除非无需理解的标签
3.	尝试猜测子表达式的含义


		/-([\da-z])/gi
		/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/
		/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi


---

### thank you 
